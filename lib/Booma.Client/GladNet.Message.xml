<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GladNet.Message</name>
    </assembly>
    <members>
        <member name="T:GladNet.Message.EventMessage">
            <summary>
            <see cref="T:GladNet.Message.EventMessage"/>s are <see cref="T:GladNet.Message.NetworkMessage"/>s that are unexpected responses to network events.
            Generally these are messages that are the result of other-client/server state changes that require 'unexpected' network messages
            to sync.
            </summary>
        </member>
        <member name="P:GladNet.Message.EventMessage.OperationTypeMappedValue">
            <summary>
            Indicates the <see cref="T:GladNet.Common.OperationType"/> that this object maps to.
            </summary>
        </member>
        <member name="M:GladNet.Message.EventMessage.#ctor">
            <summary>
            Protected protobuf-net constructor.
            </summary>
        </member>
        <member name="M:GladNet.Message.EventMessage.#ctor(GladNet.Payload.PacketPayload)">
            <summary>
            Constructor for <see cref="T:GladNet.Message.EventMessage"/> that calls <see cref="T:GladNet.Message.NetworkMessage"/>.ctor
            </summary>
            <param name="payload"><see cref="T:GladNet.Payload.PacketPayload"/> of the <see cref="T:GladNet.Message.NetworkMessage"/>.</param>
        </member>
        <member name="M:GladNet.Message.EventMessage.#ctor(GladNet.Message.NetSendable{GladNet.Payload.PacketPayload})">
            <summary>
            Protected instructor used for deep cloning the NetworkMessage.
            </summary>
            <param name="netSendablePayload">Shallow copy of the PacketPayload for copying.</param>
        </member>
        <member name="M:GladNet.Message.EventMessage.Dispatch(GladNet.Message.INetworkMessageReceiver,GladNet.Message.IMessageParameters)">
            <summary>
            Dispatches the <see cref="T:GladNet.Message.EventMessage"/> (this) to the supplied <see cref="T:GladNet.Message.INetworkMessageReceiver"/>.
            </summary>
            <param name="receiver">The target <see cref="T:GladNet.Message.INetworkMessageReceiver"/>.</param>
            <exception cref="T:System.ArgumentNullException">Throws if either parameters are null.</exception>
            <param name="parameters">The <see cref="T:GladNet.Message.IMessageParameters"/> of the <see cref="T:GladNet.Message.EventMessage"/>.</param>
        </member>
        <member name="T:GladNet.Message.IEventMessage">
            <summary>
            <see cref="T:GladNet.Message.IEventMessage"/>s are <see cref="!:INetworkMessages"/>s that are unexpected responses to network events.
            Generally these are messages that are the result of other-client/server state changes that require 'unexpected' network messages
            to sync.
            </summary>
        </member>
        <member name="T:GladNet.Message.NetworkMessage">
            <summary>
            Abstract type of all networked messages. Expects inheritors to implement dispatch functionality.
            Contains various network message related Enums.
            </summary>
        </member>
        <member name="F:GladNet.Message.NetworkMessage.syncObj">
            <summary>
            Internal class locking/sync object.
            </summary>
        </member>
        <member name="P:GladNet.Message.NetworkMessage.Payload">
            <summary>
            The payload of a <see cref="T:GladNet.Message.INetworkMessage"/>. Can be sent accross a network.
            <see cref="!:NetSendable"/> enforces its wire readyness.
            </summary>
        </member>
        <member name="M:GladNet.Message.NetworkMessage.#ctor">
            <summary>
            Protected protobuf-net constructor.
            </summary>
        </member>
        <member name="M:GladNet.Message.NetworkMessage.#ctor(GladNet.Payload.PacketPayload)">
            <summary>
            Main constructor for <see cref="T:GladNet.Message.NetworkMessage"/> that requires a <see cref="T:GladNet.Payload.PacketPayload"/> payload.
            </summary>
            <exception cref="T:System.ArgumentNullException">Throws if <see cref="T:GladNet.Payload.PacketPayload"/> instance supplied is null.</exception>
            <param name="payload">The <see cref="T:GladNet.Payload.PacketPayload"/> of the message.</param>
        </member>
        <member name="M:GladNet.Message.NetworkMessage.Dispatch(GladNet.Message.INetworkMessageReceiver,GladNet.Message.IMessageParameters)">
            <summary>
            Method dispatches a substype of <see cref="T:GladNet.Message.NetworkMessage"/> to the proper method on an <see cref="T:GladNet.Message.INetworkMessageReceiver"/>
            Inheriting classes must implement this and target the proper method of to dispatch.
            </summary>
            <param name="receiver">The target for the subtype <see cref="T:GladNet.Message.NetworkMessage"/>.</param>
            <param name="parameters">The parameters with which the message was sent.</param>
        </member>
        <member name="M:GladNet.Message.NetworkMessage.GladNet#Serializer#ISerializationVisitable#SerializeWithVisitor(GladNet.Serializer.ISerializerStrategy)">
            <summary>
            Serializes the <see cref="T:GladNet.Message.NetworkMessage"/> using a visiting serializer.
            The reason we have this is so we can get concrete Type when serializing.
            Deserialization is easy because we know what to expect.
            </summary>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="T:GladNet.Message.IRequestMessage">
            <summary>
            <see cref="T:GladNet.Message.IRequestMessage"/>s are <see cref="T:GladNet.Message.INetworkMessage"/>s that request remote peers for/to-do something.
            Generally these ellict <see cref="T:GladNet.Message.IResponseMessage"/> but there is no implict mechanism in either <see cref="T:GladNet.Message.INetworkMessage"/>
            Subtypes for such a thing.
            </summary>
        </member>
        <member name="T:GladNet.Message.RequestMessage">
            <summary>
            <see cref="T:GladNet.Message.RequestMessage"/>s are <see cref="T:GladNet.Message.NetworkMessage"/>s that request remote peers for/to-do something.
            Generally these ellict <see cref="T:GladNet.Message.ResponseMessage"/> but there is no implict mechanism in either <see cref="T:GladNet.Message.NetworkMessage"/>
            Subtypes for such a thing.
            </summary>
        </member>
        <member name="P:GladNet.Message.RequestMessage.OperationTypeMappedValue">
            <summary>
            Indicates the <see cref="T:GladNet.Common.OperationType"/> that this object maps to.
            </summary>
        </member>
        <member name="M:GladNet.Message.RequestMessage.#ctor">
            <summary>
            Protected protobuf-net constructor.
            </summary>
        </member>
        <member name="M:GladNet.Message.RequestMessage.#ctor(GladNet.Payload.PacketPayload)">
            <summary>
            Constructor for <see cref="T:GladNet.Message.RequestMessage"/> that calls <see cref="T:GladNet.Message.NetworkMessage"/>.ctor
            </summary>
            <param name="payload"><see cref="T:GladNet.Payload.PacketPayload"/> of the <see cref="T:GladNet.Message.NetworkMessage"/>.</param>
        </member>
        <member name="M:GladNet.Message.RequestMessage.#ctor(GladNet.Message.NetSendable{GladNet.Payload.PacketPayload})">
            <summary>
            Protected instructor used for deep cloning the NetworkMessage.
            </summary>
            <param name="netSendablePayload">Shallow copy of the PacketPayload for copying.</param>
        </member>
        <member name="M:GladNet.Message.RequestMessage.Dispatch(GladNet.Message.INetworkMessageReceiver,GladNet.Message.IMessageParameters)">
            <summary>
            Dispatches the <see cref="T:GladNet.Message.RequestMessage"/> (this) to the supplied <see cref="T:GladNet.Message.INetworkMessageReceiver"/>.
            </summary>
            <param name="receiver">The target <see cref="T:GladNet.Message.INetworkMessageReceiver"/>.</param>
            <exception cref="T:System.ArgumentNullException">Throws if either parameters are null.</exception>
            <param name="parameters">The <see cref="T:GladNet.Message.IMessageParameters"/> of the <see cref="T:GladNet.Message.RequestMessage"/>.</param>
        </member>
        <member name="T:GladNet.Message.IResponseMessage">
            <summary>
            <see cref="T:GladNet.Message.IResponseMessage"/>s are <see cref="T:GladNet.Message.INetworkMessage"/>s in response to <see cref="T:GladNet.Message.IRequestMessage"/> from remote peers.
            It contains additional fields/properties compared to <see cref="T:GladNet.Message.INetworkMessage"/> that provide information on the response.
            </summary>
        </member>
        <member name="T:GladNet.Message.ResponseMessage">
            <summary>
            <see cref="T:GladNet.Message.ResponseMessage"/>s are <see cref="T:GladNet.Message.NetworkMessage"/>s in response to <see cref="T:GladNet.Message.RequestMessage"/> from remote peers.
            It contains additional fields/properties compared to <see cref="T:GladNet.Message.NetworkMessage"/> that provide information on the response.
            </summary>
        </member>
        <member name="P:GladNet.Message.ResponseMessage.OperationTypeMappedValue">
            <summary>
            Indicates the <see cref="T:GladNet.Common.OperationType"/> that this object maps to.
            </summary>
        </member>
        <member name="M:GladNet.Message.ResponseMessage.#ctor">
            <summary>
            Protected protobuf-net constructor.
            </summary>
        </member>
        <member name="M:GladNet.Message.ResponseMessage.#ctor(GladNet.Payload.PacketPayload)">
            <summary>
            Constructor for <see cref="T:GladNet.Message.ResponseMessage"/> that calls <see cref="T:GladNet.Message.NetworkMessage"/>.ctor
            </summary>
            <param name="payload"><see cref="T:GladNet.Payload.PacketPayload"/> of the <see cref="T:GladNet.Message.NetworkMessage"/>.</param>
        </member>
        <member name="M:GladNet.Message.ResponseMessage.#ctor(GladNet.Message.NetSendable{GladNet.Payload.PacketPayload})">
            <summary>
            Protected instructor used for deep cloning the NetworkMessage.
            </summary>
            <param name="netSendablePayload">Shallow copy of the PacketPayload for copying.</param>
        </member>
        <member name="M:GladNet.Message.ResponseMessage.Dispatch(GladNet.Message.INetworkMessageReceiver,GladNet.Message.IMessageParameters)">
            <summary>
            Dispatches the <see cref="T:GladNet.Message.ResponseMessage"/> (this) to the supplied <see cref="T:GladNet.Message.INetworkMessageReceiver"/>.
            </summary>
            <param name="receiver">The target <see cref="T:GladNet.Message.INetworkMessageReceiver"/>.</param>
            <exception cref="T:System.ArgumentNullException">Throws if either parameters are null.</exception>
            <param name="parameters">The <see cref="T:GladNet.Message.IMessageParameters"/> of the <see cref="T:GladNet.Message.ResponseMessage"/>.</param>
        </member>
        <member name="P:GladNet.Message.StatusMessage.Status">
            <summary>
            Indicates the <see cref="T:GladNet.Common.NetStatus"/> sent with this <see cref="T:GladNet.Message.NetworkMessage"/>.
            </summary>
        </member>
        <member name="M:GladNet.Message.StatusMessage.#ctor">
            <summary>
            Protected protobuf-net constructor.
            </summary>
        </member>
        <member name="M:GladNet.Message.StatusMessage.#ctor(GladNet.Message.StatusChangePayload)">
            <summary>
            Constructor for <see cref="T:GladNet.Message.StatusMessage"/> that requires a <see cref="T:GladNet.Message.StatusChangePayload"/> payload.
            </summary>
            <exception cref="T:System.ArgumentNullException">Throws if <see cref="T:GladNet.Message.StatusChangePayload"/> instance supplied is null.</exception>
            <param name="payload">The <see cref="T:GladNet.Message.StatusChangePayload"/> of the message.</param>
        </member>
        <member name="M:GladNet.Message.StatusMessage.#ctor(GladNet.Message.NetSendable{GladNet.Payload.PacketPayload})">
            <summary>
            Protected instructor used for deep cloning the NetworkMessage.
            </summary>
            <param name="netSendablePayload">Shallow copy of the PacketPayload for copying.</param>
        </member>
        <member name="M:GladNet.Message.StatusMessage.Dispatch(GladNet.Message.INetworkMessageReceiver,GladNet.Message.IMessageParameters)">
            <summary>
            Dispatches the <see cref="T:GladNet.Message.StatusMessage"/> (this) to the supplied <see cref="T:GladNet.Message.INetworkMessageReceiver"/>.
            </summary>
            <param name="receiver">The target <see cref="T:GladNet.Message.INetworkMessageReceiver"/>.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the receiver is null.</exception>
            <param name="parameters">The <see cref="T:GladNet.Message.IMessageParameters"/> of the <see cref="T:GladNet.Message.EventMessage"/>.</param>
        </member>
        <member name="T:GladNet.Message.INetworkMessage">
            <summary>
            Contract for a networked message. Provides the barest of function which exposes the <see cref="!:NetSendable"/> <see cref="T:GladNet.Payload.PacketPayload"/>
            of the message.
            </summary>
        </member>
        <member name="T:GladNet.Message.IOperationTypeMappable">
            <summary>
            Object that can be mapped to an <see cref="T:GladNet.Common.OperationType"/>.
            </summary>
        </member>
        <member name="P:GladNet.Message.IOperationTypeMappable.OperationTypeMappedValue">
            <summary>
            Indicates the <see cref="T:GladNet.Common.OperationType"/> that this object maps to.
            </summary>
        </member>
        <member name="T:GladNet.Message.IPayloadContainer">
            <summary>
            Implementer exposes a <see cref="T:GladNet.Message.NetSendable`1"/>
            </summary>
        </member>
        <member name="P:GladNet.Message.IPayloadContainer.Payload">
            <summary>
            The payload of a <see cref="T:GladNet.Message.INetworkMessage"/>. Can be sent accross a network.
            <see cref="!:NetSendable"/> enforces its wire readyness.
            </summary>
        </member>
        <member name="T:GladNet.Message.NetSendableState">
            <summary>
            Finite valid states a <see cref="!:NetSendable"/> can be in.
            </summary>
        </member>
        <member name="T:GladNet.Message.NetSendable`1">
            <summary>
            Represents a wire-ready version of the TData that provides functionality to serialize, encrypt and decrypt the TData
            </summary>
            <typeparam name="TData">The Type of encryptable and serializable data becoming wire-ready.</typeparam>
        </member>
        <member name="F:GladNet.Message.NetSendable`1.syncObj">
            <summary>
            Internal object locking/sync object.
            </summary>
        </member>
        <member name="P:GladNet.Message.NetSendable`1.DataState">
            <summary>
            Indicates the state the object is currently in.
            </summary>
        </member>
        <member name="P:GladNet.Message.NetSendable`1.Data">
            <summary>
            The TData to be manipulated or the resulting deserialized TData. Can be null depending on state.
            </summary>
        </member>
        <member name="F:GladNet.Message.NetSendable`1.byteData">
            <summary>
            The wire-ready byte[] that represents the TData in the corressponding <see cref="!:State"/>
            </summary>
        </member>
        <member name="M:GladNet.Message.NetSendable`1.#ctor(`0)">
            <summary>
            Constructor for typical <see cref="!:NetSendable"/> that requires an instance of TData.
            </summary>
            <param name="data">Instance of TData to be wire-ready prepared.</param>
        </member>
        <member name="M:GladNet.Message.NetSendable`1.#ctor">
            <summary>
            Empty protobuf-net constuctor
            </summary>
        </member>
        <member name="M:GladNet.Message.NetSendable`1.Encrypt(GladNet.Encryption.IEncryptorStrategy)">
            <summary>
            Encrypts the TData contained within this <see cref="!:NetSendable"/>.
            </summary>
            <param name="encryptor">Object responsible for the encryption.</param>
            <exception cref="T:System.InvalidOperationException">Throws when the <see cref="!:NetSendable"/> is not in a Serialized <see cref="T:GladNet.Message.NetSendableState"/></exception>
            <returns>Indicates if encryption was successful</returns>
        </member>
        <member name="M:GladNet.Message.NetSendable`1.Decrypt(GladNet.Encryption.IDecryptorStrategy)">
            <summary>
            Decrypts the TData contained within this <see cref="!:NetSendable"/>
            </summary>
            <param name="decryptor"></param>
            <exception cref="T:System.InvalidOperationException">Throws when the <see cref="!:NetSendable"/> is not in a Encrypted <see cref="T:GladNet.Message.NetSendableState"/>
            or if the internal byte representation is null..</exception>
            <returns>Indicates if decryption was successful.</returns>
        </member>
        <member name="M:GladNet.Message.NetSendable`1.Serialize(GladNet.Serializer.ISerializerStrategy)">
            <summary>
            Serializes the TData into a byte[] for the wire.
            </summary>
            <param name="serializer">Serializer object for the serialization process.</param>
            <exception cref="T:System.InvalidOperationException">Throws if the data is not in Default <see cref="!:State"/></exception>
            <returns>Inidicates if serialization was successful</returns>
        </member>
        <member name="M:GladNet.Message.NetSendable`1.Deserialize(GladNet.Serializer.IDeserializerStrategy)">
            <summary>
            Deserializes the byteData into TData.
            </summary>
            <param name="deserializer">Deserializer object for the deserialization process.</param>
            <exception cref="T:System.InvalidOperationException">Throws if the <see cref="!:State"/> isn't Serialized.</exception>
            <returns>Indicates if deserialization was successful</returns>
        </member>
        <member name="M:GladNet.Message.NetSendable`1.ThrowIfInvalidState(GladNet.Message.NetSendableState)">
            <summary>
            Throws if the state differs from the state passes as a parameter.
            Optionally checks, and will throw, if the internal byte[] is invalid.
            </summary>
            <param name="expectedState">The <see cref="T:GladNet.Message.NetSendableState"/> we expect this instance to be in.</param>
            <param name="checkData">Inidicates if we should validate the byte[]</param>
            <exception cref="T:System.InvalidOperationException">Throws if expectedState differs from current state. Optionally throws if checkData is true and the byte[] is null.</exception>
        </member>
        <member name="M:GladNet.Message.NetSendable`1.ShallowClone">
            <summary>
            Produces a shallow copy of this <see cref="!:NetSendable"/> instance.
            </summary>
            <returns>A shallow copied instance of this NetSendable. Preserves reference to byte[] for efficient multiplexing.</returns>
        </member>
        <member name="M:GladNet.Message.NetSendable`1.GladNet#Common#IShallowCloneable#ShallowClone">
            <summary>
            Produces a shallow copy of this <see cref="!:NetSendable"/> instance.
            </summary>
            <returns>A shallow copied instance of this NetSendable. Preserves reference to byte[] for efficient multiplexing.</returns>
        </member>
        <member name="T:GladNet.Message.INetworkMessageReceiver">
            <summary>
            A contract for receivers of <see cref="T:GladNet.Message.NetworkMessage"/> interface subtypes.
            </summary>
        </member>
        <member name="M:GladNet.Message.INetworkMessageReceiver.OnNetworkMessageReceive(GladNet.Message.IRequestMessage,GladNet.Message.IMessageParameters)">
            <summary>
            Interface method overload for receiving a <see cref="T:GladNet.Message.IRequestMessage"/>.
            </summary>
            <param name="message">The request recieved from the remote peer.</param>
            <param name="parameters">The message parameters the message was sent with.</param>
        </member>
        <member name="M:GladNet.Message.INetworkMessageReceiver.OnNetworkMessageReceive(GladNet.Message.IResponseMessage,GladNet.Message.IMessageParameters)">
            <summary>
            Interface method overload for receiving a <see cref="T:GladNet.Message.IResponseMessage"/>.
            </summary>
            <param name="message">The response recieved from the remote peer.</param>
            <param name="parameters">The message parameters the message was sent with.</param>
        </member>
        <member name="M:GladNet.Message.INetworkMessageReceiver.OnNetworkMessageReceive(GladNet.Message.IEventMessage,GladNet.Message.IMessageParameters)">
            <summary>
            Interface method overload for receiving a <see cref="T:GladNet.Message.IEventMessage"/>.
            </summary>
            <param name="message">The event recieved from the remote peer.</param>
            <param name="parameters">The message parameters the message was sent with.</param>
        </member>
        <member name="M:GladNet.Message.INetworkMessageReceiver.OnNetworkMessageReceive(GladNet.Message.IStatusMessage,GladNet.Message.IMessageParameters)">
            <summary>
            Dispatchable method that handles <see cref="T:GladNet.Message.IStatusMessage"/> changes.
            </summary>
            <param name="status">The status message recieved from the remote peer.</param>
            <param name="parameters">The message parameters the message was sent with.</param>
        </member>
        <member name="T:GladNet.Message.IMessageParameters">
            <summary>
            Contract providing details about message parameters which are requested for processing
            </summary>
        </member>
        <member name="P:GladNet.Message.IMessageParameters.Encrypted">
            <summary>
            Indicates if the messge is/was encrypted depending on context.
            </summary>
        </member>
        <member name="P:GladNet.Message.IMessageParameters.Channel">
            <summary>
            Indicates the channel of the message.
            </summary>
        </member>
        <member name="P:GladNet.Message.IMessageParameters.DeliveryMethod">
            <summary>
            Indicates the <see cref="P:GladNet.Message.IMessageParameters.DeliveryMethod"/> method of the message. Can/should be used to verify correct channel usage.
            </summary>
        </member>
        <member name="T:GladNet.Message.IStaticPayloadParameters">
            <summary>
            Optional contract for <see cref="!:PacketPayload"/>s to implement if they have unchanging (static)
            parameters for their message sending. If they MUST be sent in such a way.
            </summary>
        </member>
        <member name="T:GladNet.Message.StatusChangePayload">
            <summary>
            A wire-type payload that contains information about a <see cref="!:NetStauts"/> change.
            </summary>
        </member>
        <member name="P:GladNet.Message.StatusChangePayload.Status">
            <summary>
            Indicates the <see cref="!:NetStats"/> of the change.
            </summary>
        </member>
        <member name="M:GladNet.Message.StatusChangePayload.#ctor(GladNet.Common.NetStatus)">
            <summary>
            Generates a <see cref="T:GladNet.Message.StatusChangePayload"/> instance with the given <see cref="T:GladNet.Common.NetStatus"/>
            </summary>
            <param name="status">NetStatus of the change.</param>
        </member>
        <member name="M:GladNet.Message.StatusChangePayload.#ctor">
            <summary>
            Empty protobuf-net constuctor
            </summary>
        </member>
    </members>
</doc>
