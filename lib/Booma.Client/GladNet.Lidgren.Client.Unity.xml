<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GladNet.Lidgren.Client.Unity</name>
    </assembly>
    <members>
        <member name="T:GladNet.Lidgren.Client.Unity.IClientNetworkMessageReciever">
            <summary>
            Contract for payload and message recieveing semantics.
            </summary>
        </member>
        <member name="M:GladNet.Lidgren.Client.Unity.IClientNetworkMessageReciever.OnReceiveResponse(GladNet.Message.IResponseMessage,GladNet.Message.IMessageParameters)">
            <summary>
            Called internally when a response is recieved.
            </summary>
            <param name="payload"><see cref="T:GladNet.Message.IResponseMessage"/> sent by the peer.</param>
            <param name="parameters">Parameters the message was sent with.</param>
        </member>
        <member name="M:GladNet.Lidgren.Client.Unity.IClientNetworkMessageReciever.OnReceiveEvent(GladNet.Message.IEventMessage,GladNet.Message.IMessageParameters)">
            <summary>
            Called internally when an event is recieved.
            </summary>
            <param name="message"><see cref="T:GladNet.Message.IEventMessage"/> sent by the peer.</param>
            <param name="parameters">Parameters the message was sent with.</param>
        </member>
        <member name="M:GladNet.Lidgren.Client.Unity.IClientNetworkMessageReciever.OnStatusChanged(GladNet.Common.NetStatus)">
            <summary>
            Called internaly when a status changed is recieved.
            </summary>
            <param name="status">New <see cref="T:GladNet.Common.NetStatus"/> that has been dispatched.</param>
        </member>
        <member name="P:GladNet.Lidgren.Client.Unity.UnityClientPeer`3.deserializer">
            <summary>
            Deserializer capable of deserializing incoming messages of the expected format.
            </summary>
        </member>
        <member name="P:GladNet.Lidgren.Client.Unity.UnityClientPeer`3.serializer">
            <summary>
            Serializer capable of serializing outgoing messages of the designated format.
            </summary>
        </member>
        <member name="P:GladNet.Lidgren.Client.Unity.UnityClientPeer`3.serializerRegister">
            <summary>
            Serialization registry service that provides simple type registeration services to make aware specified types
            to the serializer service called <see cref="P:GladNet.Lidgren.Client.Unity.UnityClientPeer`3.serializer"/> within this class.
            </summary>
        </member>
        <member name="M:GladNet.Lidgren.Client.Unity.UnityClientPeer`3.SendRequest(GladNet.Payload.PacketPayload,GladNet.Common.DeliveryMethod,System.Boolean,System.Byte)">
            <summary>
            Sends a networked request.
            </summary>
            <param name="payload"><see cref="T:GladNet.Payload.PacketPayload"/> for the desired network request message.</param>
            <param name="deliveryMethod">Desired <see cref="T:GladNet.Common.DeliveryMethod"/> for the request. See documentation for more information.</param>
            <param name="encrypt">Optional: Indicates if the message should be encrypted. Default: false</param>
            <param name="channel">Optional: Inidicates the channel the network message should be sent on. Default: 0</param>
            <returns>Indication of the message send state.</returns>
        </member>
        <member name="M:GladNet.Lidgren.Client.Unity.UnityClientPeer`3.SendRequest``1(``0)">
            <summary>
            Sends a networked request.
            Additionally this message/payloadtype is known to have static send parameters and those will be used in transit.
            </summary>
            <typeparam name="TPacketType">Type of the packet payload.</typeparam>
            <param name="payload">Payload instance to be sent in the message that contains static message parameters.</param>
            <returns>Indication of the message send state.</returns>
        </member>
        <member name="M:GladNet.Lidgren.Client.Unity.UnityClientPeer`3.OnReceiveResponse(GladNet.Message.IResponseMessage,GladNet.Message.IMessageParameters)">
            <summary>
            Handles a <see cref="T:GladNet.Payload.PacketPayload"/> sent as a response.
            </summary>
            <param name="payload">Response payload data from the network.</param>
        </member>
        <member name="M:GladNet.Lidgren.Client.Unity.UnityClientPeer`3.OnReceiveEvent(GladNet.Message.IEventMessage,GladNet.Message.IMessageParameters)">
            <summary>
            Handles a <see cref="T:GladNet.Payload.PacketPayload"/> sent as an event.
            </summary>
            <param name="payload">Event payload data from the network.</param>
        </member>
        <member name="M:GladNet.Lidgren.Client.Unity.UnityClientPeer`3.OnStatusChanged(GladNet.Common.NetStatus)">
            <summary>
            Handles a changed <see cref="T:GladNet.Common.NetStatus"/> stat from either local events or network events.
            </summary>
            <param name="status">Current status.</param>
        </member>
    </members>
</doc>
