<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GladNet.Message.Handlers</name>
    </assembly>
    <members>
        <member name="T:GladNet.Message.Handlers.ChainHandlerExtensions">
            <summary>
            Extensions for the <see cref="!:IMessageHandlerStrategy&lt;TPeerType, TNetworkMessageType&gt;&gt;"/>.
            </summary>
        </member>
        <member name="M:GladNet.Message.Handlers.ChainHandlerExtensions.ToService``1(GladNet.Message.Handlers.IMessageHandlerStrategy{``0,GladNet.Message.IEventMessage})">
            <summary>
            Builds a handler service bridge around the provided object.
            </summary>
            <typeparam name="TPeerType">The peer type (inferred usually)</typeparam>
            <param name="strat">Message handler strategy instance.</param>
            <returns>A message handler service.</returns>
        </member>
        <member name="M:GladNet.Message.Handlers.ChainHandlerExtensions.ToService``1(GladNet.Message.Handlers.IMessageHandlerStrategy{``0,GladNet.Message.IRequestMessage})">
            <summary>
            Builds a handler service bridge around the provided object.
            </summary>
            <typeparam name="TPeerType">The peer type (inferred usually)</typeparam>
            <param name="strat">Message handler strategy instance.</param>
            <returns>A message handler service.</returns>
        </member>
        <member name="M:GladNet.Message.Handlers.ChainHandlerExtensions.ToService``1(GladNet.Message.Handlers.IMessageHandlerStrategy{``0,GladNet.Message.IResponseMessage})">
            <summary>
            Builds a handler service bridge around the provided object.
            </summary>
            <typeparam name="TPeerType">The peer type (inferred usually)</typeparam>
            <param name="strat">Message handler strategy instance.</param>
            <returns>A message handler service.</returns>
        </member>
        <member name="T:GladNet.Message.Handlers.PayloadCollectionBuilderExtensions">
            <summary>
            Extension methods for collections of <see cref="T:GladNet.Message.Handlers.IMessageHandler`2"/>.
            </summary>
        </member>
        <member name="M:GladNet.Message.Handlers.PayloadCollectionBuilderExtensions.ToChainHandler``2(System.Collections.Generic.IEnumerable{GladNet.Message.Handlers.IMessageHandler{``0,``1}})">
            <summary>
            Builds a <see cref="T:GladNet.Message.Handlers.ChainMessageHandlerStrategy`2"/> with the provided collections
            of <see cref="T:GladNet.Message.Handlers.IMessageHandler`2"/>s.
            </summary>
            <typeparam name="TPeerType">Peer Type (inferred usually)</typeparam>
            <typeparam name="TNetworkMessageType">Network message type (inferred usually)</typeparam>
            <param name="handlers">Handlers to use to build the chain handler.</param>
            <returns>A new chain handler strategy.</returns>
        </member>
        <member name="T:GladNet.Message.Handlers.IEventMessageHandler`1">
            <summary>
            Contract for <see cref="T:GladNet.Message.IEventMessage"/> message handler.
            </summary>
            <typeparam name="TPeerType">Type of the peer.</typeparam>
        </member>
        <member name="T:GladNet.Message.Handlers.IRequestMessageHandler`1">
            <summary>
            Contract for <see cref="T:GladNet.Message.IRequestMessage"/> message handler.
            </summary>
            <typeparam name="TPeerType">Type of the peer.</typeparam>
        </member>
        <member name="T:GladNet.Message.Handlers.IResponseMessageHandler`1">
            <summary>
            Contract for <see cref="T:GladNet.Message.IResponseMessage"/> message handler.
            </summary>
            <typeparam name="TPeerType">Type of the peer.</typeparam>
        </member>
        <member name="T:GladNet.Message.Handlers.IMessageHandler`2">
            <summary>
            Service tries to handle a <see cref="T:GladNet.Message.INetworkMessage"/>.
            </summary>
            <typeparam name="TPeerType">Type of the peer.</typeparam>
            <typeparam name="TNetworkMessageType">Type of the <see cref="T:GladNet.Message.INetworkMessage"/>.</typeparam>
        </member>
        <member name="M:GladNet.Message.Handlers.IMessageHandler`2.TryProcessMessage(`1,GladNet.Message.IMessageParameters,`0)">
            <summary>
            Attempts to handle the <typeparamref name="TNetworkMessageType"/>.
            </summary>
            <param name="message">Network messages instance.</param>
            <param name="parameters">Parameters the message was sent with.</param>
            <param name="peer">Peer that is involved with the message.</param>
            <returns>True if the handler can handle the message.</returns>
        </member>
        <member name="T:GladNet.Message.Handlers.IMessageHandlerRegistry`2">
            <summary>
            Allows for registration of new <see cref="!:IMessageHandler&lt;TPeerType&gt;"/> instances.
            </summary>
            <typeparam name="TPeerType">Peer of the handler.</typeparam>
            <typeparam name="TNetworkMessageType">The network message Type of the handler.</typeparam>
        </member>
        <member name="M:GladNet.Message.Handlers.IMessageHandlerRegistry`2.Register(GladNet.Message.Handlers.IMessageHandler{`0,`1})">
            <summary>
            Registers a new handler.
            </summary>
            <param name="messageHandler">Handler instance.</param>
        </member>
        <member name="T:GladNet.Message.Handlers.MessageHandlerTypeAttribute">
            <summary>
            Metadata marker for a message handler.
            </summary>
        </member>
        <member name="P:GladNet.Message.Handlers.MessageHandlerTypeAttribute.OpType">
            <summary>
            Operation Type the handler handles.
            </summary>
        </member>
        <member name="T:GladNet.Message.Handlers.EventMessageHandlerService`1">
            <summary>
            <see cref="T:GladNet.Message.INetworkMessage"/> handler service that handles events based on the
            strategy provided.
            </summary>
            <typeparam name="TPeerType">Type of the peer.</typeparam>
        </member>
        <member name="P:GladNet.Message.Handlers.EventMessageHandlerService`1.handlerStrat">
            <summary>
            Strategy for how to handle incoming <see cref="T:GladNet.Message.IEventMessage"/>
            </summary>
        </member>
        <member name="M:GladNet.Message.Handlers.EventMessageHandlerService`1.TryProcessMessage(GladNet.Message.IEventMessage,GladNet.Message.IMessageParameters,`0)">
            <summary>
            Attempts to handle the <see cref="T:GladNet.Message.IEventMessage"/>
            </summary>
            <param name="message">Network messages instance.</param>
            <param name="parameters">Parameters the message was sent with.</param>
            <param name="peer">Peer that is involved with the message.</param>
            <returns>True if the handler can handle the message.</returns>
        </member>
        <member name="T:GladNet.Message.Handlers.IEventMessageHandlerService`1">
            <summary>
            IoC/Meta-data Marker for Event handlers services.
            </summary>
            <typeparam name="TPeerType">Type of the peer.</typeparam>
        </member>
        <member name="T:GladNet.Message.Handlers.IRequestMessageHandlerService`1">
            <summary>
            IoC/Meta-data Marker for request handlers services.
            </summary>
            <typeparam name="TPeerType">Type of the peer.</typeparam>
        </member>
        <member name="T:GladNet.Message.Handlers.IResponseMessageHandlerService`1">
            <summary>
            IoC/Meta-data Marker for Response handlers services.
            </summary>
            <typeparam name="TPeerType">Type of the peer.</typeparam>
        </member>
        <member name="T:GladNet.Message.Handlers.MultipleChainResponsbilityMessageHandlerStrategy`2">
            <summary>
            Combines strategies for payload handling in a chain of responsibility fashion.
            </summary>
            <typeparam name="TPeerType">The session type.</typeparam>
        </member>
        <member name="P:GladNet.Message.Handlers.MultipleChainResponsbilityMessageHandlerStrategy`2.strategyChain">
            <summary>
            Combined collection of enumerable strategies for handling <typeparamref name="TNetworkMessageType"/>s.
            </summary>
        </member>
        <member name="M:GladNet.Message.Handlers.MultipleChainResponsbilityMessageHandlerStrategy`2.TryProcessMessage(`1,GladNet.Message.IMessageParameters,`0)">
            <summary>
            Attempts to handle the <typeparamref name="TNetworkMessageType"/>.
            </summary>
            <param name="message">Network messages instance.</param>
            <param name="parameters">Parameters the message was sent with.</param>
            <param name="peer">Peer that is involved with the message.</param>
            <returns>True if the handler can handle the message.</returns>
        </member>
        <member name="T:GladNet.Message.Handlers.RequestMessageHandlerService`1">
            <summary>
            <see cref="T:GladNet.Message.INetworkMessage"/> handler service that handles events based on the
            strategy provided.
            </summary>
            <typeparam name="TPeerType">Type of the peer.</typeparam>
        </member>
        <member name="P:GladNet.Message.Handlers.RequestMessageHandlerService`1.handlerStrat">
            <summary>
            Strategy for how to handle incoming <see cref="T:GladNet.Message.IRequestMessage"/>
            </summary>
        </member>
        <member name="M:GladNet.Message.Handlers.RequestMessageHandlerService`1.TryProcessMessage(GladNet.Message.IRequestMessage,GladNet.Message.IMessageParameters,`0)">
            <summary>
            Attempts to handle the <see cref="T:GladNet.Message.IRequestMessage"/>
            </summary>
            <param name="message">Network messages instance.</param>
            <param name="parameters">Parameters the message was sent with.</param>
            <param name="peer">Peer that is involved with the message.</param>
            <returns>True if the handler can handle the message.</returns>
        </member>
        <member name="T:GladNet.Message.Handlers.ResponseMessageHandlerService`1">
            <summary>
            <see cref="T:GladNet.Message.INetworkMessage"/> handler service that handles events based on the
            strategy provided.
            </summary>
            <typeparam name="TPeerType">Type of the peer.</typeparam>
        </member>
        <member name="P:GladNet.Message.Handlers.ResponseMessageHandlerService`1.handlerStrat">
            <summary>
            Strategy for how to handle incoming <see cref="T:GladNet.Message.IResponseMessage"/>
            </summary>
        </member>
        <member name="M:GladNet.Message.Handlers.ResponseMessageHandlerService`1.TryProcessMessage(GladNet.Message.IResponseMessage,GladNet.Message.IMessageParameters,`0)">
            <summary>
            Attempts to handle the <see cref="T:GladNet.Message.IResponseMessage"/>
            </summary>
            <param name="message">Network messages instance.</param>
            <param name="parameters">Parameters the message was sent with.</param>
            <param name="peer">Peer that is involved with the message.</param>
            <returns>True if the handler can handle the message.</returns>
        </member>
        <member name="T:GladNet.Message.Handlers.ChainMessageHandlerStrategy`2">
            <summary>
            Provides chain of responsibility semantics as a strategy for payload handling.
            </summary>
            <typeparam name="TPeerType">Session type to handle.</typeparam>
        </member>
        <member name="P:GladNet.Message.Handlers.ChainMessageHandlerStrategy`2.handlers">
            <summary>
            Collection of handles to chain over.
            </summary>
        </member>
        <member name="M:GladNet.Message.Handlers.ChainMessageHandlerStrategy`2.TryProcessMessage(`1,GladNet.Message.IMessageParameters,`0)">
            <summary>
            Attempts to handle the <typeparamref name="TNetworkMessageType"/>.
            </summary>
            <param name="message">The message instance.</param>
            <param name="parameters">Parameters the message was sent with.</param>
            <param name="peer">Peer that is involved with the message.</param>
            <returns>True if the handler can handle the message.</returns>
        </member>
        <member name="T:GladNet.Message.Handlers.IMessageHandlerStrategy`2">
            <summary>
            Contract for being a strategy for handling <typeparamref name="TNetworkMessageType"/>
            </summary>
            <typeparam name="TPeerType">Peer type that implements <see cref="T:GladNet.Engine.Common.INetPeer"/>.</typeparam>
            <typeparam name="TNetworkMessageType">The network message type.</typeparam>
        </member>
        <member name="M:GladNet.Message.Handlers.IMessageHandlerStrategy`2.TryProcessMessage(`1,GladNet.Message.IMessageParameters,`0)">
            <summary>
            Attempts to handle the <typeparamref name="TNetworkMessageType"/>.
            </summary>
            <param name="message">Network messages instance.</param>
            <param name="parameters">Parameters the message was sent with.</param>
            <param name="peer">Peer that is involved with the message.</param>
            <returns>True if the handler can handle the message.</returns>
        </member>
    </members>
</doc>
